/*
 * Res.Grosvenor - Rank
 *
 * Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface. This endpoint is specific to Grosvenor Casinos implementation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse :  IEquatable<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse" /> class.
        /// </summary>
        /// <param name="Title"> (required).</param>
        /// <param name="FirstName"> (required).</param>
        /// <param name="LastName"> (required).</param>
        /// <param name="MiddleName"> (required).</param>
        /// <param name="DateOfBirth"> (required).</param>
        /// <param name="IsVip"> (required).</param>
        /// <param name="Rank"> (required).</param>
        public RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse(string Title = null, string FirstName = null, string LastName = null, string MiddleName = null, string DateOfBirth = null, bool? IsVip = null, int? Rank = null)
        {
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "FirstName" is required (not null)
            if (FirstName == null)
            {
                throw new InvalidDataException("FirstName is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.FirstName = FirstName;
            }
            // to ensure "LastName" is required (not null)
            if (LastName == null)
            {
                throw new InvalidDataException("LastName is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.LastName = LastName;
            }
            // to ensure "MiddleName" is required (not null)
            if (MiddleName == null)
            {
                throw new InvalidDataException("MiddleName is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.MiddleName = MiddleName;
            }
            // to ensure "DateOfBirth" is required (not null)
            if (DateOfBirth == null)
            {
                throw new InvalidDataException("DateOfBirth is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.DateOfBirth = DateOfBirth;
            }
            // to ensure "IsVip" is required (not null)
            if (IsVip == null)
            {
                throw new InvalidDataException("IsVip is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.IsVip = IsVip;
            }
            // to ensure "Rank" is required (not null)
            if (Rank == null)
            {
                throw new InvalidDataException("Rank is a required property for RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse and cannot be null");
            }
            else
            {
                this.Rank = Rank;
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Title")]
        public string Title { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="MiddleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="DateOfBirth")]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="IsVip")]
        public bool? IsVip { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Rank")]
        public int? Rank { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  IsVip: ").Append(IsVip).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse)obj);
        }

        /// <summary>
        /// Returns true if RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.MiddleName == other.MiddleName ||
                    this.MiddleName != null &&
                    this.MiddleName.Equals(other.MiddleName)
                ) && 
                (
                    this.DateOfBirth == other.DateOfBirth ||
                    this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    this.IsVip == other.IsVip ||
                    this.IsVip != null &&
                    this.IsVip.Equals(other.IsVip)
                ) && 
                (
                    this.Rank == other.Rank ||
                    this.Rank != null &&
                    this.Rank.Equals(other.Rank)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.MiddleName != null)
                    hash = hash * 59 + this.MiddleName.GetHashCode();
                if (this.DateOfBirth != null)
                    hash = hash * 59 + this.DateOfBirth.GetHashCode();
                if (this.IsVip != null)
                    hash = hash * 59 + this.IsVip.GetHashCode();
                if (this.Rank != null)
                    hash = hash * 59 + this.Rank.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse left, RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse left, RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
