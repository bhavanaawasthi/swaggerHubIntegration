/*
 * Res.Grosvenor - Rank
 *
 * Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface. This endpoint is specific to Grosvenor Casinos implementation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CasinoEventsResponse :  IEquatable<CasinoEventsResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CasinoEventsResponse" /> class.
        /// </summary>
        /// <param name="CasinoNumber"> (required).</param>
        /// <param name="CategoryId"> (required).</param>
        /// <param name="Category"> (required).</param>
        /// <param name="Title"> (required).</param>
        /// <param name="ValidFrom"> (required).</param>
        /// <param name="ValidTo"> (required).</param>
        /// <param name="ImageUrl"> (required).</param>
        /// <param name="Description"> (required).</param>
        /// <param name="EventSchedule"> (required).</param>
        /// <param name="EventStartTime"> (required).</param>
        /// <param name="EventFacebookUrl"> (required).</param>
        public CasinoEventsResponse(int? CasinoNumber = null, int? CategoryId = null, string Category = null, string Title = null, string ValidFrom = null, string ValidTo = null, string ImageUrl = null, string Description = null, Object EventSchedule = null, string EventStartTime = null, string EventFacebookUrl = null)
        {
            // to ensure "CasinoNumber" is required (not null)
            if (CasinoNumber == null)
            {
                throw new InvalidDataException("CasinoNumber is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.CasinoNumber = CasinoNumber;
            }
            // to ensure "CategoryId" is required (not null)
            if (CategoryId == null)
            {
                throw new InvalidDataException("CategoryId is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.CategoryId = CategoryId;
            }
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
            // to ensure "Title" is required (not null)
            if (Title == null)
            {
                throw new InvalidDataException("Title is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.Title = Title;
            }
            // to ensure "ValidFrom" is required (not null)
            if (ValidFrom == null)
            {
                throw new InvalidDataException("ValidFrom is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.ValidFrom = ValidFrom;
            }
            // to ensure "ValidTo" is required (not null)
            if (ValidTo == null)
            {
                throw new InvalidDataException("ValidTo is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.ValidTo = ValidTo;
            }
            // to ensure "ImageUrl" is required (not null)
            if (ImageUrl == null)
            {
                throw new InvalidDataException("ImageUrl is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.ImageUrl = ImageUrl;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "EventSchedule" is required (not null)
            if (EventSchedule == null)
            {
                throw new InvalidDataException("EventSchedule is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.EventSchedule = EventSchedule;
            }
            // to ensure "EventStartTime" is required (not null)
            if (EventStartTime == null)
            {
                throw new InvalidDataException("EventStartTime is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.EventStartTime = EventStartTime;
            }
            // to ensure "EventFacebookUrl" is required (not null)
            if (EventFacebookUrl == null)
            {
                throw new InvalidDataException("EventFacebookUrl is a required property for CasinoEventsResponse and cannot be null");
            }
            else
            {
                this.EventFacebookUrl = EventFacebookUrl;
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CasinoNumber")]
        public int? CasinoNumber { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CategoryId")]
        public int? CategoryId { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Category")]
        public string Category { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Title")]
        public string Title { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ValidFrom")]
        public string ValidFrom { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ValidTo")]
        public string ValidTo { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ImageUrl")]
        public string ImageUrl { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Description")]
        public string Description { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="EventSchedule")]
        public Object EventSchedule { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="EventStartTime")]
        public string EventStartTime { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="EventFacebookUrl")]
        public string EventFacebookUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CasinoEventsResponse {\n");
            sb.Append("  CasinoNumber: ").Append(CasinoNumber).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidTo: ").Append(ValidTo).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventSchedule: ").Append(EventSchedule).Append("\n");
            sb.Append("  EventStartTime: ").Append(EventStartTime).Append("\n");
            sb.Append("  EventFacebookUrl: ").Append(EventFacebookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((CasinoEventsResponse)obj);
        }

        /// <summary>
        /// Returns true if CasinoEventsResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CasinoEventsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CasinoEventsResponse other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CasinoNumber == other.CasinoNumber ||
                    this.CasinoNumber != null &&
                    this.CasinoNumber.Equals(other.CasinoNumber)
                ) && 
                (
                    this.CategoryId == other.CategoryId ||
                    this.CategoryId != null &&
                    this.CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.ValidFrom == other.ValidFrom ||
                    this.ValidFrom != null &&
                    this.ValidFrom.Equals(other.ValidFrom)
                ) && 
                (
                    this.ValidTo == other.ValidTo ||
                    this.ValidTo != null &&
                    this.ValidTo.Equals(other.ValidTo)
                ) && 
                (
                    this.ImageUrl == other.ImageUrl ||
                    this.ImageUrl != null &&
                    this.ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.EventSchedule == other.EventSchedule ||
                    this.EventSchedule != null &&
                    this.EventSchedule.Equals(other.EventSchedule)
                ) && 
                (
                    this.EventStartTime == other.EventStartTime ||
                    this.EventStartTime != null &&
                    this.EventStartTime.Equals(other.EventStartTime)
                ) && 
                (
                    this.EventFacebookUrl == other.EventFacebookUrl ||
                    this.EventFacebookUrl != null &&
                    this.EventFacebookUrl.Equals(other.EventFacebookUrl)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CasinoNumber != null)
                    hash = hash * 59 + this.CasinoNumber.GetHashCode();
                if (this.CategoryId != null)
                    hash = hash * 59 + this.CategoryId.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.ValidFrom != null)
                    hash = hash * 59 + this.ValidFrom.GetHashCode();
                if (this.ValidTo != null)
                    hash = hash * 59 + this.ValidTo.GetHashCode();
                if (this.ImageUrl != null)
                    hash = hash * 59 + this.ImageUrl.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.EventSchedule != null)
                    hash = hash * 59 + this.EventSchedule.GetHashCode();
                if (this.EventStartTime != null)
                    hash = hash * 59 + this.EventStartTime.GetHashCode();
                if (this.EventFacebookUrl != null)
                    hash = hash * 59 + this.EventFacebookUrl.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(CasinoEventsResponse left, CasinoEventsResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CasinoEventsResponse left, CasinoEventsResponse right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
