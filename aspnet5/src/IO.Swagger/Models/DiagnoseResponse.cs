/*
 * Res.Grosvenor - Rank
 *
 * Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface. This endpoint is specific to Grosvenor Casinos implementation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DiagnoseResponse :  IEquatable<DiagnoseResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiagnoseResponse" /> class.
        /// </summary>
        /// <param name="AzureTableStorage"> (required).</param>
        /// <param name="MembershipDB"> (required).</param>
        /// <param name="SpineRESTAPI"> (required).</param>
        /// <param name="BallyXMLAPI"> (required).</param>
        public DiagnoseResponse(string AzureTableStorage = null, string MembershipDB = null, string SpineRESTAPI = null, string BallyXMLAPI = null)
        {
            // to ensure "AzureTableStorage" is required (not null)
            if (AzureTableStorage == null)
            {
                throw new InvalidDataException("AzureTableStorage is a required property for DiagnoseResponse and cannot be null");
            }
            else
            {
                this.AzureTableStorage = AzureTableStorage;
            }
            // to ensure "MembershipDB" is required (not null)
            if (MembershipDB == null)
            {
                throw new InvalidDataException("MembershipDB is a required property for DiagnoseResponse and cannot be null");
            }
            else
            {
                this.MembershipDB = MembershipDB;
            }
            // to ensure "SpineRESTAPI" is required (not null)
            if (SpineRESTAPI == null)
            {
                throw new InvalidDataException("SpineRESTAPI is a required property for DiagnoseResponse and cannot be null");
            }
            else
            {
                this.SpineRESTAPI = SpineRESTAPI;
            }
            // to ensure "BallyXMLAPI" is required (not null)
            if (BallyXMLAPI == null)
            {
                throw new InvalidDataException("BallyXMLAPI is a required property for DiagnoseResponse and cannot be null");
            }
            else
            {
                this.BallyXMLAPI = BallyXMLAPI;
            }
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Azure Table Storage")]
        public string AzureTableStorage { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Membership DB")]
        public string MembershipDB { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Spine REST API")]
        public string SpineRESTAPI { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Bally XML API")]
        public string BallyXMLAPI { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DiagnoseResponse {\n");
            sb.Append("  AzureTableStorage: ").Append(AzureTableStorage).Append("\n");
            sb.Append("  MembershipDB: ").Append(MembershipDB).Append("\n");
            sb.Append("  SpineRESTAPI: ").Append(SpineRESTAPI).Append("\n");
            sb.Append("  BallyXMLAPI: ").Append(BallyXMLAPI).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((DiagnoseResponse)obj);
        }

        /// <summary>
        /// Returns true if DiagnoseResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DiagnoseResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiagnoseResponse other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.AzureTableStorage == other.AzureTableStorage ||
                    this.AzureTableStorage != null &&
                    this.AzureTableStorage.Equals(other.AzureTableStorage)
                ) && 
                (
                    this.MembershipDB == other.MembershipDB ||
                    this.MembershipDB != null &&
                    this.MembershipDB.Equals(other.MembershipDB)
                ) && 
                (
                    this.SpineRESTAPI == other.SpineRESTAPI ||
                    this.SpineRESTAPI != null &&
                    this.SpineRESTAPI.Equals(other.SpineRESTAPI)
                ) && 
                (
                    this.BallyXMLAPI == other.BallyXMLAPI ||
                    this.BallyXMLAPI != null &&
                    this.BallyXMLAPI.Equals(other.BallyXMLAPI)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AzureTableStorage != null)
                    hash = hash * 59 + this.AzureTableStorage.GetHashCode();
                if (this.MembershipDB != null)
                    hash = hash * 59 + this.MembershipDB.GetHashCode();
                if (this.SpineRESTAPI != null)
                    hash = hash * 59 + this.SpineRESTAPI.GetHashCode();
                if (this.BallyXMLAPI != null)
                    hash = hash * 59 + this.BallyXMLAPI.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(DiagnoseResponse left, DiagnoseResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DiagnoseResponse left, DiagnoseResponse right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
