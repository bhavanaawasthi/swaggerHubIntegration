/* 
 * Res.Grosvenor - Rank
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoyaltyV20Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accrue loyalty points
        /// </summary>
        /// <remarks>
        /// Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void AccrueLoyaltyPoints (AccrueLoyaltyPointsRequest body);

        /// <summary>
        /// Accrue loyalty points
        /// </summary>
        /// <remarks>
        /// Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AccrueLoyaltyPointsWithHttpInfo (AccrueLoyaltyPointsRequest body);
        /// <summary>
        /// Create Loyalty Account for Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void CreateLoyaltyAccountForDigitalMembershipAccount (CreateLoyaltyAccountForDigitalMembershipAccountRequest body);

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateLoyaltyAccountForDigitalMembershipAccountWithHttpInfo (CreateLoyaltyAccountForDigitalMembershipAccountRequest body);
        /// <summary>
        /// Create Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Registers a retail customer in the loyalty system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void CreateLoyaltyAccountForRetailMembershipAccount (CreateLoyaltyAccountForRetailMembershipAccountRequest body);

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Registers a retail customer in the loyalty system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateLoyaltyAccountForRetailMembershipAccountWithHttpInfo (CreateLoyaltyAccountForRetailMembershipAccountRequest body);
        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body);

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse> LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountWithHttpInfo (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body);
        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2 (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body);

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response> MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2WithHttpInfo (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body);
        /// <summary>
        /// Redeem loyalty points
        /// </summary>
        /// <remarks>
        /// Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void RedeemLoyaltyPoints (RedeemLoyaltyPointsRequest body);

        /// <summary>
        /// Redeem loyalty points
        /// </summary>
        /// <remarks>
        /// Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedeemLoyaltyPointsWithHttpInfo (RedeemLoyaltyPointsRequest body);
        /// <summary>
        /// Retrieve all Accounts Summary by Grade
        /// </summary>
        /// <remarks>
        /// Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>RetrieveAllAccountsSummaryByGradeResponse</returns>
        RetrieveAllAccountsSummaryByGradeResponse RetrieveAllAccountsSummaryByGrade (string grade);

        /// <summary>
        /// Retrieve all Accounts Summary by Grade
        /// </summary>
        /// <remarks>
        /// Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>ApiResponse of RetrieveAllAccountsSummaryByGradeResponse</returns>
        ApiResponse<RetrieveAllAccountsSummaryByGradeResponse> RetrieveAllAccountsSummaryByGradeWithHttpInfo (string grade);
        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>RetrievePointsBalanceResponse17</returns>
        RetrievePointsBalanceResponse17 RetrievePointsBalance1 (long? playerId = null, int? cardNo = null, string membershipNo = null);

        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>ApiResponse of RetrievePointsBalanceResponse17</returns>
        ApiResponse<RetrievePointsBalanceResponse17> RetrievePointsBalance1WithHttpInfo (long? playerId = null, int? cardNo = null, string membershipNo = null);
        /// <summary>
        /// Retrieves  customer details by the specified card number.
        /// </summary>
        /// <remarks>
        /// Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse RetrievesCustomerDetailsByTheSpecifiedCardNumber_ (int? cardNo);

        /// <summary>
        /// Retrieves  customer details by the specified card number.
        /// </summary>
        /// <remarks>
        /// Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>ApiResponse of RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse> RetrievesCustomerDetailsByTheSpecifiedCardNumber_WithHttpInfo (int? cardNo);
        /// <summary>
        /// Update Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Updates the existing retail loyalty account with specified values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void UpdateLoyaltyAccountForRetailMembershipAccount (UpdateLoyaltyAccountForRetailMembershipAccountRequest body);

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Updates the existing retail loyalty account with specified values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateLoyaltyAccountForRetailMembershipAccountWithHttpInfo (UpdateLoyaltyAccountForRetailMembershipAccountRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accrue loyalty points
        /// </summary>
        /// <remarks>
        /// Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AccrueLoyaltyPointsAsync (AccrueLoyaltyPointsRequest body);

        /// <summary>
        /// Accrue loyalty points
        /// </summary>
        /// <remarks>
        /// Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AccrueLoyaltyPointsAsyncWithHttpInfo (AccrueLoyaltyPointsRequest body);
        /// <summary>
        /// Create Loyalty Account for Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateLoyaltyAccountForDigitalMembershipAccountAsync (CreateLoyaltyAccountForDigitalMembershipAccountRequest body);

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoyaltyAccountForDigitalMembershipAccountAsyncWithHttpInfo (CreateLoyaltyAccountForDigitalMembershipAccountRequest body);
        /// <summary>
        /// Create Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Registers a retail customer in the loyalty system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateLoyaltyAccountForRetailMembershipAccountAsync (CreateLoyaltyAccountForRetailMembershipAccountRequest body);

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Registers a retail customer in the loyalty system.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo (CreateLoyaltyAccountForRetailMembershipAccountRequest body);
        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        System.Threading.Tasks.Task<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse> LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountAsync (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body);

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account
        /// </summary>
        /// <remarks>
        /// Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse>> LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountAsyncWithHttpInfo (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body);
        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        System.Threading.Tasks.Task<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response> MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Async (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body);

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response>> MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2AsyncWithHttpInfo (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body);
        /// <summary>
        /// Redeem loyalty points
        /// </summary>
        /// <remarks>
        /// Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedeemLoyaltyPointsAsync (RedeemLoyaltyPointsRequest body);

        /// <summary>
        /// Redeem loyalty points
        /// </summary>
        /// <remarks>
        /// Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedeemLoyaltyPointsAsyncWithHttpInfo (RedeemLoyaltyPointsRequest body);
        /// <summary>
        /// Retrieve all Accounts Summary by Grade
        /// </summary>
        /// <remarks>
        /// Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>Task of RetrieveAllAccountsSummaryByGradeResponse</returns>
        System.Threading.Tasks.Task<RetrieveAllAccountsSummaryByGradeResponse> RetrieveAllAccountsSummaryByGradeAsync (string grade);

        /// <summary>
        /// Retrieve all Accounts Summary by Grade
        /// </summary>
        /// <remarks>
        /// Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>Task of ApiResponse (RetrieveAllAccountsSummaryByGradeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveAllAccountsSummaryByGradeResponse>> RetrieveAllAccountsSummaryByGradeAsyncWithHttpInfo (string grade);
        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of RetrievePointsBalanceResponse17</returns>
        System.Threading.Tasks.Task<RetrievePointsBalanceResponse17> RetrievePointsBalance1Async (long? playerId = null, int? cardNo = null, string membershipNo = null);

        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePointsBalanceResponse17)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievePointsBalanceResponse17>> RetrievePointsBalance1AsyncWithHttpInfo (long? playerId = null, int? cardNo = null, string membershipNo = null);
        /// <summary>
        /// Retrieves  customer details by the specified card number.
        /// </summary>
        /// <remarks>
        /// Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>Task of RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        System.Threading.Tasks.Task<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse> RetrievesCustomerDetailsByTheSpecifiedCardNumber_Async (int? cardNo);

        /// <summary>
        /// Retrieves  customer details by the specified card number.
        /// </summary>
        /// <remarks>
        /// Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>Task of ApiResponse (RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse>> RetrievesCustomerDetailsByTheSpecifiedCardNumber_AsyncWithHttpInfo (int? cardNo);
        /// <summary>
        /// Update Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Updates the existing retail loyalty account with specified values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateLoyaltyAccountForRetailMembershipAccountAsync (UpdateLoyaltyAccountForRetailMembershipAccountRequest body);

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account
        /// </summary>
        /// <remarks>
        /// Updates the existing retail loyalty account with specified values.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo (UpdateLoyaltyAccountForRetailMembershipAccountRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoyaltyV20Api : ILoyaltyV20Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyV20Api"/> class.
        /// </summary>
        /// <returns></returns>
        public LoyaltyV20Api(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyV20Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoyaltyV20Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accrue loyalty points Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void AccrueLoyaltyPoints (AccrueLoyaltyPointsRequest body)
        {
             AccrueLoyaltyPointsWithHttpInfo(body);
        }

        /// <summary>
        /// Accrue loyalty points Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AccrueLoyaltyPointsWithHttpInfo (AccrueLoyaltyPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->AccrueLoyaltyPoints");

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccrueLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Accrue loyalty points Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AccrueLoyaltyPointsAsync (AccrueLoyaltyPointsRequest body)
        {
             await AccrueLoyaltyPointsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Accrue loyalty points Issue loyalty points to the specified account. | Name              | Type      | Required                             | Description                                   | Example           | |:- --               |:- --       |:- --                                  |:- --                                           |:- --               | |CardNo             |int        |yes                                   |Number on the back of the membership card      |570515106          | |LocationId         |string     |yes                                   |Casion locationId                              |005Bar,FOOD        | |Points             |int        |yes                                   |points that needs adjusting                    |100                    | |TransactionDateTime |DateTime   |yes                                  |Transaction Date and time .                    |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AccrueLoyaltyPointsAsyncWithHttpInfo (AccrueLoyaltyPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->AccrueLoyaltyPoints");

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccrueLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void CreateLoyaltyAccountForDigitalMembershipAccount (CreateLoyaltyAccountForDigitalMembershipAccountRequest body)
        {
             CreateLoyaltyAccountForDigitalMembershipAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateLoyaltyAccountForDigitalMembershipAccountWithHttpInfo (CreateLoyaltyAccountForDigitalMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->CreateLoyaltyAccountForDigitalMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/digital";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyAccountForDigitalMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateLoyaltyAccountForDigitalMembershipAccountAsync (CreateLoyaltyAccountForDigitalMembershipAccountRequest body)
        {
             await CreateLoyaltyAccountForDigitalMembershipAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Loyalty Account for Digital Membership Account Managing actions for digital and retail loyalty accounts. Registers a digital customer in the loyalty system. | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoyaltyAccountForDigitalMembershipAccountAsyncWithHttpInfo (CreateLoyaltyAccountForDigitalMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->CreateLoyaltyAccountForDigitalMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/digital";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyAccountForDigitalMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account Registers a retail customer in the loyalty system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void CreateLoyaltyAccountForRetailMembershipAccount (CreateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
             CreateLoyaltyAccountForRetailMembershipAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account Registers a retail customer in the loyalty system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateLoyaltyAccountForRetailMembershipAccountWithHttpInfo (CreateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->CreateLoyaltyAccountForRetailMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyAccountForRetailMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account Registers a retail customer in the loyalty system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateLoyaltyAccountForRetailMembershipAccountAsync (CreateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
             await CreateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Loyalty Account for Retail Membership Account Registers a retail customer in the loyalty system.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo (CreateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->CreateLoyaltyAccountForRetailMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLoyaltyAccountForRetailMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        public LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body)
        {
             ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse> localVarResponse = LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        public ApiResponse< LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse > LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountWithHttpInfo (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse)));
            
        }

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse</returns>
        public async System.Threading.Tasks.Task<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse> LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountAsync (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body)
        {
             ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse> localVarResponse = await LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link existing Retail Loyalty Account to new Digital Membership Account Adding newly created digital account to the existing retail loyalty account and returns the points balance. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse>> LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountAsyncWithHttpInfo (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkExistingRetailLoyaltyAccountToNewDigitalMembershipAccountResponse)));
            
        }

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2 This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        public MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2 (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body)
        {
             ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response> localVarResponse = MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2 This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        public ApiResponse< MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response > MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2WithHttpInfo (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2");

            var localVarPath = "/loyalty/v2/accounts/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response)));
            
        }

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2 This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response</returns>
        public async System.Threading.Tasks.Task<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response> MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Async (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body)
        {
             ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response> localVarResponse = await MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge existing Digital and Retail Loyalty Accounts - flavour 2 This method is a varient of the above method, which links the existing digital and retail loyalty accounts and merges the points earned. Returns the combined points balance. This can be used when retail membership number is not available to the client. Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |long       |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response>> MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2AsyncWithHttpInfo (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2Request body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2");

            var localVarPath = "/loyalty/v2/accounts/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeExistingDigitalAndRetailLoyaltyAccountsFlavour2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeExistingDigitalAndRetailLoyaltyAccountsFlavour1Response)));
            
        }

        /// <summary>
        /// Redeem loyalty points Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void RedeemLoyaltyPoints (RedeemLoyaltyPointsRequest body)
        {
             RedeemLoyaltyPointsWithHttpInfo(body);
        }

        /// <summary>
        /// Redeem loyalty points Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedeemLoyaltyPointsWithHttpInfo (RedeemLoyaltyPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->RedeemLoyaltyPoints");

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Redeem loyalty points Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedeemLoyaltyPointsAsync (RedeemLoyaltyPointsRequest body)
        {
             await RedeemLoyaltyPointsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Redeem loyalty points Redeem loyalty points from the specified account. | Name              | Type      | Required                                  | Description                                   | Example           | |:- --               |:- --       |:- --                                       |:- --                                           |:- --               | |CardNo             |int        |optional (Required only for Retail)        |Number on the back of the membership card      |570515106          | |LocationId         |string     |optional (Required only for Retail)        |Casion locationId                              |005Bar,FOOD        | |PlayerId           |long       |optional (Required only for digital)       |Customer identifier from the digital platform. |570515106383925248     | |Points             |int        |Required                                   |points that needs adjusting                    |100                    | |RedeemDateTime     |DateTime   |yes                                        |Date and time of the redemption call.          |2015-04-28T10:10:25Z   |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedeemLoyaltyPointsAsyncWithHttpInfo (RedeemLoyaltyPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->RedeemLoyaltyPoints");

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve all Accounts Summary by Grade Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>RetrieveAllAccountsSummaryByGradeResponse</returns>
        public RetrieveAllAccountsSummaryByGradeResponse RetrieveAllAccountsSummaryByGrade (string grade)
        {
             ApiResponse<RetrieveAllAccountsSummaryByGradeResponse> localVarResponse = RetrieveAllAccountsSummaryByGradeWithHttpInfo(grade);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all Accounts Summary by Grade Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>ApiResponse of RetrieveAllAccountsSummaryByGradeResponse</returns>
        public ApiResponse< RetrieveAllAccountsSummaryByGradeResponse > RetrieveAllAccountsSummaryByGradeWithHttpInfo (string grade)
        {
            // verify the required parameter 'grade' is set
            if (grade == null)
                throw new ApiException(400, "Missing required parameter 'grade' when calling LoyaltyV20Api->RetrieveAllAccountsSummaryByGrade");

            var localVarPath = "/loyalty/v2/accounts/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grade != null) localVarQueryParams.Add("grade", Configuration.ApiClient.ParameterToString(grade)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAllAccountsSummaryByGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveAllAccountsSummaryByGradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrieveAllAccountsSummaryByGradeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveAllAccountsSummaryByGradeResponse)));
            
        }

        /// <summary>
        /// Retrieve all Accounts Summary by Grade Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>Task of RetrieveAllAccountsSummaryByGradeResponse</returns>
        public async System.Threading.Tasks.Task<RetrieveAllAccountsSummaryByGradeResponse> RetrieveAllAccountsSummaryByGradeAsync (string grade)
        {
             ApiResponse<RetrieveAllAccountsSummaryByGradeResponse> localVarResponse = await RetrieveAllAccountsSummaryByGradeAsyncWithHttpInfo(grade);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve all Accounts Summary by Grade Retrieves a summary information about each customer, who belongs to the specified grade. The below parameter is required.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grade">A grouping of customers by certain properties. Possible values: MEMBER, GOLD, BLACK.</param>
        /// <returns>Task of ApiResponse (RetrieveAllAccountsSummaryByGradeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrieveAllAccountsSummaryByGradeResponse>> RetrieveAllAccountsSummaryByGradeAsyncWithHttpInfo (string grade)
        {
            // verify the required parameter 'grade' is set
            if (grade == null)
                throw new ApiException(400, "Missing required parameter 'grade' when calling LoyaltyV20Api->RetrieveAllAccountsSummaryByGrade");

            var localVarPath = "/loyalty/v2/accounts/summary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (grade != null) localVarQueryParams.Add("grade", Configuration.ApiClient.ParameterToString(grade)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveAllAccountsSummaryByGrade", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrieveAllAccountsSummaryByGradeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrieveAllAccountsSummaryByGradeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrieveAllAccountsSummaryByGradeResponse)));
            
        }

        /// <summary>
        /// Retrieve Points balance Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>RetrievePointsBalanceResponse17</returns>
        public RetrievePointsBalanceResponse17 RetrievePointsBalance1 (long? playerId = null, int? cardNo = null, string membershipNo = null)
        {
             ApiResponse<RetrievePointsBalanceResponse17> localVarResponse = RetrievePointsBalance1WithHttpInfo(playerId, cardNo, membershipNo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Points balance Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>ApiResponse of RetrievePointsBalanceResponse17</returns>
        public ApiResponse< RetrievePointsBalanceResponse17 > RetrievePointsBalance1WithHttpInfo (long? playerId = null, int? cardNo = null, string membershipNo = null)
        {

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter
            if (membershipNo != null) localVarQueryParams.Add("membershipNo", Configuration.ApiClient.ParameterToString(membershipNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePointsBalance1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePointsBalanceResponse17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievePointsBalanceResponse17) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePointsBalanceResponse17)));
            
        }

        /// <summary>
        /// Retrieve Points balance Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of RetrievePointsBalanceResponse17</returns>
        public async System.Threading.Tasks.Task<RetrievePointsBalanceResponse17> RetrievePointsBalance1Async (long? playerId = null, int? cardNo = null, string membershipNo = null)
        {
             ApiResponse<RetrievePointsBalanceResponse17> localVarResponse = await RetrievePointsBalance1AsyncWithHttpInfo(playerId, cardNo, membershipNo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Points balance Retrieves loyalty points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |int    |Number on the back of the membership card.(retail) |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePointsBalanceResponse17)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievePointsBalanceResponse17>> RetrievePointsBalance1AsyncWithHttpInfo (long? playerId = null, int? cardNo = null, string membershipNo = null)
        {

            var localVarPath = "/loyalty/v2/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter
            if (membershipNo != null) localVarQueryParams.Add("membershipNo", Configuration.ApiClient.ParameterToString(membershipNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePointsBalance1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePointsBalanceResponse17>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievePointsBalanceResponse17) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePointsBalanceResponse17)));
            
        }

        /// <summary>
        /// Retrieves  customer details by the specified card number. Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        public RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse RetrievesCustomerDetailsByTheSpecifiedCardNumber_ (int? cardNo)
        {
             ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse> localVarResponse = RetrievesCustomerDetailsByTheSpecifiedCardNumber_WithHttpInfo(cardNo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves  customer details by the specified card number. Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>ApiResponse of RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        public ApiResponse< RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse > RetrievesCustomerDetailsByTheSpecifiedCardNumber_WithHttpInfo (int? cardNo)
        {
            // verify the required parameter 'cardNo' is set
            if (cardNo == null)
                throw new ApiException(400, "Missing required parameter 'cardNo' when calling LoyaltyV20Api->RetrievesCustomerDetailsByTheSpecifiedCardNumber_");

            var localVarPath = "/loyalty/v2/accounts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievesCustomerDetailsByTheSpecifiedCardNumber_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse)));
            
        }

        /// <summary>
        /// Retrieves  customer details by the specified card number. Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>Task of RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse</returns>
        public async System.Threading.Tasks.Task<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse> RetrievesCustomerDetailsByTheSpecifiedCardNumber_Async (int? cardNo)
        {
             ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse> localVarResponse = await RetrievesCustomerDetailsByTheSpecifiedCardNumber_AsyncWithHttpInfo(cardNo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves  customer details by the specified card number. Retrieves customer profile information by cardNo. | Name          | Type  | Required                                              | Description                                       | Example           | |:- --           |:- --   |:- --                                                   |:- --                                               |:- --               | CardNo          |int    | Yes                                                   |Number on the back of the membership card.(retail) |16227376           |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cardNo">Number on the back of the membership card for retail</param>
        /// <returns>Task of ApiResponse (RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse>> RetrievesCustomerDetailsByTheSpecifiedCardNumber_AsyncWithHttpInfo (int? cardNo)
        {
            // verify the required parameter 'cardNo' is set
            if (cardNo == null)
                throw new ApiException(400, "Missing required parameter 'cardNo' when calling LoyaltyV20Api->RetrievesCustomerDetailsByTheSpecifiedCardNumber_");

            var localVarPath = "/loyalty/v2/accounts/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievesCustomerDetailsByTheSpecifiedCardNumber_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievesCustomerDetailsByTheSpecifiedCardNumberResponse)));
            
        }

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account Updates the existing retail loyalty account with specified values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void UpdateLoyaltyAccountForRetailMembershipAccount (UpdateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
             UpdateLoyaltyAccountForRetailMembershipAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account Updates the existing retail loyalty account with specified values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateLoyaltyAccountForRetailMembershipAccountWithHttpInfo (UpdateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->UpdateLoyaltyAccountForRetailMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyAccountForRetailMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account Updates the existing retail loyalty account with specified values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateLoyaltyAccountForRetailMembershipAccountAsync (UpdateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
             await UpdateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update Loyalty Account for Retail Membership Account Updates the existing retail loyalty account with specified values.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateLoyaltyAccountForRetailMembershipAccountAsyncWithHttpInfo (UpdateLoyaltyAccountForRetailMembershipAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV20Api->UpdateLoyaltyAccountForRetailMembershipAccount");

            var localVarPath = "/loyalty/v2/accounts/retail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateLoyaltyAccountForRetailMembershipAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
