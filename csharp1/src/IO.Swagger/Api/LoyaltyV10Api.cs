/* 
 * Res.Grosvenor - Rank
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoyaltyV10Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add digital Account
        /// </summary>
        /// <remarks>
        /// Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AddDigitalAccountResponse</returns>
        AddDigitalAccountResponse AddDigitalAccount (AddDigitalAccountRequest body);

        /// <summary>
        /// Add digital Account
        /// </summary>
        /// <remarks>
        /// Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddDigitalAccountResponse</returns>
        ApiResponse<AddDigitalAccountResponse> AddDigitalAccountWithHttpInfo (AddDigitalAccountRequest body);
        /// <summary>
        /// Create customers playpoints account
        /// </summary>
        /// <remarks>
        /// | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void CreateCustomersPlaypointsAccount (CreateCustomersPlaypointsAccountRequest body);

        /// <summary>
        /// Create customers playpoints account
        /// </summary>
        /// <remarks>
        /// | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateCustomersPlaypointsAccountWithHttpInfo (CreateCustomersPlaypointsAccountRequest body);
        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MergeDigitalAndRetailAccountsFlavour1Response</returns>
        MergeDigitalAndRetailAccountsFlavour1Response MergeDigitalAndRetailAccountsFlavour2 (MergeDigitalAndRetailAccountsFlavour2Request body);

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MergeDigitalAndRetailAccountsFlavour1Response</returns>
        ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response> MergeDigitalAndRetailAccountsFlavour2WithHttpInfo (MergeDigitalAndRetailAccountsFlavour2Request body);
        /// <summary>
        /// Redeem points
        /// </summary>
        /// <remarks>
        /// Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void RedeemPoints (RedeemPointsRequest body);

        /// <summary>
        /// Redeem points
        /// </summary>
        /// <remarks>
        /// Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RedeemPointsWithHttpInfo (RedeemPointsRequest body);
        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>RetrievePointsBalanceResponse</returns>
        RetrievePointsBalanceResponse RetrievePointsBalance (long? playerId = null, double? cardNo = null, string membershipNo = null);

        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>ApiResponse of RetrievePointsBalanceResponse</returns>
        ApiResponse<RetrievePointsBalanceResponse> RetrievePointsBalanceWithHttpInfo (long? playerId = null, double? cardNo = null, string membershipNo = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add digital Account
        /// </summary>
        /// <remarks>
        /// Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AddDigitalAccountResponse</returns>
        System.Threading.Tasks.Task<AddDigitalAccountResponse> AddDigitalAccountAsync (AddDigitalAccountRequest body);

        /// <summary>
        /// Add digital Account
        /// </summary>
        /// <remarks>
        /// Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddDigitalAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddDigitalAccountResponse>> AddDigitalAccountAsyncWithHttpInfo (AddDigitalAccountRequest body);
        /// <summary>
        /// Create customers playpoints account
        /// </summary>
        /// <remarks>
        /// | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateCustomersPlaypointsAccountAsync (CreateCustomersPlaypointsAccountRequest body);

        /// <summary>
        /// Create customers playpoints account
        /// </summary>
        /// <remarks>
        /// | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateCustomersPlaypointsAccountAsyncWithHttpInfo (CreateCustomersPlaypointsAccountRequest body);
        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MergeDigitalAndRetailAccountsFlavour1Response</returns>
        System.Threading.Tasks.Task<MergeDigitalAndRetailAccountsFlavour1Response> MergeDigitalAndRetailAccountsFlavour2Async (MergeDigitalAndRetailAccountsFlavour2Request body);

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2
        /// </summary>
        /// <remarks>
        /// This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MergeDigitalAndRetailAccountsFlavour1Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response>> MergeDigitalAndRetailAccountsFlavour2AsyncWithHttpInfo (MergeDigitalAndRetailAccountsFlavour2Request body);
        /// <summary>
        /// Redeem points
        /// </summary>
        /// <remarks>
        /// Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RedeemPointsAsync (RedeemPointsRequest body);

        /// <summary>
        /// Redeem points
        /// </summary>
        /// <remarks>
        /// Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RedeemPointsAsyncWithHttpInfo (RedeemPointsRequest body);
        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of RetrievePointsBalanceResponse</returns>
        System.Threading.Tasks.Task<RetrievePointsBalanceResponse> RetrievePointsBalanceAsync (long? playerId = null, double? cardNo = null, string membershipNo = null);

        /// <summary>
        /// Retrieve Points balance
        /// </summary>
        /// <remarks>
        /// Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePointsBalanceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrievePointsBalanceResponse>> RetrievePointsBalanceAsyncWithHttpInfo (long? playerId = null, double? cardNo = null, string membershipNo = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoyaltyV10Api : ILoyaltyV10Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyV10Api"/> class.
        /// </summary>
        /// <returns></returns>
        public LoyaltyV10Api(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyV10Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoyaltyV10Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add digital Account Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AddDigitalAccountResponse</returns>
        public AddDigitalAccountResponse AddDigitalAccount (AddDigitalAccountRequest body)
        {
             ApiResponse<AddDigitalAccountResponse> localVarResponse = AddDigitalAccountWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add digital Account Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddDigitalAccountResponse</returns>
        public ApiResponse< AddDigitalAccountResponse > AddDigitalAccountWithHttpInfo (AddDigitalAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->AddDigitalAccount");

            var localVarPath = "/loyalty/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDigitalAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddDigitalAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddDigitalAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddDigitalAccountResponse)));
            
        }

        /// <summary>
        /// Add digital Account Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of AddDigitalAccountResponse</returns>
        public async System.Threading.Tasks.Task<AddDigitalAccountResponse> AddDigitalAccountAsync (AddDigitalAccountRequest body)
        {
             ApiResponse<AddDigitalAccountResponse> localVarResponse = await AddDigitalAccountAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add digital Account Adding the newly created digital account to the retail loyalty account and returns the points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |MembershipNo       |string     |Yes        |Retail Casino membership number.               |123456789         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddDigitalAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddDigitalAccountResponse>> AddDigitalAccountAsyncWithHttpInfo (AddDigitalAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->AddDigitalAccount");

            var localVarPath = "/loyalty/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddDigitalAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddDigitalAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddDigitalAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddDigitalAccountResponse)));
            
        }

        /// <summary>
        /// Create customers playpoints account | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void CreateCustomersPlaypointsAccount (CreateCustomersPlaypointsAccountRequest body)
        {
             CreateCustomersPlaypointsAccountWithHttpInfo(body);
        }

        /// <summary>
        /// Create customers playpoints account | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateCustomersPlaypointsAccountWithHttpInfo (CreateCustomersPlaypointsAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->CreateCustomersPlaypointsAccount");

            var localVarPath = "/loyalty/v1/customers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomersPlaypointsAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create customers playpoints account | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateCustomersPlaypointsAccountAsync (CreateCustomersPlaypointsAccountRequest body)
        {
             await CreateCustomersPlaypointsAccountAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create customers playpoints account | Name          | Type      | Required  | Description                                       | Example           | |:- --           |:- --       |:- --       |:- --                                               |:- --               | |PlayerId       |long       |yes        |Customer identifier from the digital platform.     |570515106383925248 | |Forename       |string     |yes        |first name of the customer                         |\&quot;Bob\&quot;              | |Surname        |string     |yes        |Last name of the customer                          |\&quot;Marley\&quot;           | |DateOfBirth    |Date       |yes        |Date of birth of the customer.                     |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateCustomersPlaypointsAccountAsyncWithHttpInfo (CreateCustomersPlaypointsAccountRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->CreateCustomersPlaypointsAccount");

            var localVarPath = "/loyalty/v1/customers/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCustomersPlaypointsAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2 This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>MergeDigitalAndRetailAccountsFlavour1Response</returns>
        public MergeDigitalAndRetailAccountsFlavour1Response MergeDigitalAndRetailAccountsFlavour2 (MergeDigitalAndRetailAccountsFlavour2Request body)
        {
             ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response> localVarResponse = MergeDigitalAndRetailAccountsFlavour2WithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2 This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of MergeDigitalAndRetailAccountsFlavour1Response</returns>
        public ApiResponse< MergeDigitalAndRetailAccountsFlavour1Response > MergeDigitalAndRetailAccountsFlavour2WithHttpInfo (MergeDigitalAndRetailAccountsFlavour2Request body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->MergeDigitalAndRetailAccountsFlavour2");

            var localVarPath = "/loyalty/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDigitalAndRetailAccountsFlavour2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeDigitalAndRetailAccountsFlavour1Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeDigitalAndRetailAccountsFlavour1Response)));
            
        }

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2 This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of MergeDigitalAndRetailAccountsFlavour1Response</returns>
        public async System.Threading.Tasks.Task<MergeDigitalAndRetailAccountsFlavour1Response> MergeDigitalAndRetailAccountsFlavour2Async (MergeDigitalAndRetailAccountsFlavour2Request body)
        {
             ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response> localVarResponse = await MergeDigitalAndRetailAccountsFlavour2AsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge Digital and Retail Accounts - flavour 2 This method is a varient of the above method which links the digital and retail loyalty accounts and merges the points earned. This can be used when retail membership number is not available to the client. Returns the combined points balance, Request body fields: | Name              | Type      | Required  | Description                                   | Example           | |:- --               |:- --       |:- --       |:- --                                           |:- --               | |PlayerId           |long       |Yes        |Customer identifier from the digital platform. |570515106383925248 | |CardNo             |int        |Yes        |Player loyalty Card number                     |1460040108         | |DateofBirth        |Date       |yes        |Date of birth of the customer.                 |1982-04-28         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (MergeDigitalAndRetailAccountsFlavour1Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response>> MergeDigitalAndRetailAccountsFlavour2AsyncWithHttpInfo (MergeDigitalAndRetailAccountsFlavour2Request body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->MergeDigitalAndRetailAccountsFlavour2");

            var localVarPath = "/loyalty/v1/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MergeDigitalAndRetailAccountsFlavour2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MergeDigitalAndRetailAccountsFlavour1Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MergeDigitalAndRetailAccountsFlavour1Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MergeDigitalAndRetailAccountsFlavour1Response)));
            
        }

        /// <summary>
        /// Redeem points Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void RedeemPoints (RedeemPointsRequest body)
        {
             RedeemPointsWithHttpInfo(body);
        }

        /// <summary>
        /// Redeem points Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RedeemPointsWithHttpInfo (RedeemPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->RedeemPoints");

            var localVarPath = "/loyalty/v1/points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Redeem points Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RedeemPointsAsync (RedeemPointsRequest body)
        {
             await RedeemPointsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Redeem points Redeem the playpoints balance, Request body fields: | Name              | Type      | Required  | Description                                       | Example               | |:- --               |:- --       |:- --       |:- --                                               |:- --                   | |PlayerId           |long       |yes        |Customer identifier from the digital platform.     |570515106383925248     | |Points             |int        |yes        |amount that needs adjusting                        |100                    | |RedeemDateTime     |DateTime   |yes        |Date and time of the redemption call.              |2015-04-28T10:10:25Z   | Response would be * OK (HTTP 200) - when redemption is successful * Bad Request (400) -       * the request parameters are not valid or      * the player hasn&#39;t got enough funds or      * the player has exceeded the daily redemption limit (Message: \&quot;Sorry, you can only redeem a maximum of 50000 PLAY Points in a day\&quot;) * Error (500) - when there is an error redeeming the points. Most likely cause would be ability to connect to other systems.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RedeemPointsAsyncWithHttpInfo (RedeemPointsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling LoyaltyV10Api->RedeemPoints");

            var localVarPath = "/loyalty/v1/points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RedeemPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retrieve Points balance Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>RetrievePointsBalanceResponse</returns>
        public RetrievePointsBalanceResponse RetrievePointsBalance (long? playerId = null, double? cardNo = null, string membershipNo = null)
        {
             ApiResponse<RetrievePointsBalanceResponse> localVarResponse = RetrievePointsBalanceWithHttpInfo(playerId, cardNo, membershipNo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Points balance Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>ApiResponse of RetrievePointsBalanceResponse</returns>
        public ApiResponse< RetrievePointsBalanceResponse > RetrievePointsBalanceWithHttpInfo (long? playerId = null, double? cardNo = null, string membershipNo = null)
        {

            var localVarPath = "/loyalty/v1/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter
            if (membershipNo != null) localVarQueryParams.Add("membershipNo", Configuration.ApiClient.ParameterToString(membershipNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePointsBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePointsBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievePointsBalanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePointsBalanceResponse)));
            
        }

        /// <summary>
        /// Retrieve Points balance Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of RetrievePointsBalanceResponse</returns>
        public async System.Threading.Tasks.Task<RetrievePointsBalanceResponse> RetrievePointsBalanceAsync (long? playerId = null, double? cardNo = null, string membershipNo = null)
        {
             ApiResponse<RetrievePointsBalanceResponse> localVarResponse = await RetrievePointsBalanceAsyncWithHttpInfo(playerId, cardNo, membershipNo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve Points balance Retrieves play points balance for the customer, any one of the below parameters is required. | Name          | Type  | Description                                       | Example           | |:- --           |:- --   |:- --                                               |:- --               | |playerId       |long   |Customer identifier from the digital platform.     |570515106383925248 | |cardNo         |number |Number on the back of the membership card.         |16227376           | |membershipNo   |string |Retail Casino membership number.                   |1850034070         |
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Customer identifier from the digital platform (optional)</param>
        /// <param name="cardNo">Number on the back of the membership card. If specified, then Grade will be returned. (optional)</param>
        /// <param name="membershipNo">Retail Casino membership number. (optional)</param>
        /// <returns>Task of ApiResponse (RetrievePointsBalanceResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RetrievePointsBalanceResponse>> RetrievePointsBalanceAsyncWithHttpInfo (long? playerId = null, double? cardNo = null, string membershipNo = null)
        {

            var localVarPath = "/loyalty/v1/points/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (playerId != null) localVarQueryParams.Add("playerId", Configuration.ApiClient.ParameterToString(playerId)); // query parameter
            if (cardNo != null) localVarQueryParams.Add("cardNo", Configuration.ApiClient.ParameterToString(cardNo)); // query parameter
            if (membershipNo != null) localVarQueryParams.Add("membershipNo", Configuration.ApiClient.ParameterToString(membershipNo)); // query parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrievePointsBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RetrievePointsBalanceResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RetrievePointsBalanceResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RetrievePointsBalanceResponse)));
            
        }

    }
}
