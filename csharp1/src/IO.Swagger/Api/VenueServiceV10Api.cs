/* 
 * Res.Grosvenor - Rank
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVenueServiceV10Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// All Casinos
        /// </summary>
        /// <remarks>
        /// Returns collection of all casinos
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AllCasinosResponse&gt;</returns>
        List<AllCasinosResponse> AllCasinos ();

        /// <summary>
        /// All Casinos
        /// </summary>
        /// <remarks>
        /// Returns collection of all casinos
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AllCasinosResponse&gt;</returns>
        ApiResponse<List<AllCasinosResponse>> AllCasinosWithHttpInfo ();
        /// <summary>
        /// Casino Details
        /// </summary>
        /// <remarks>
        /// Returns casino specific details when the casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>CasinoDetailsResponse</returns>
        CasinoDetailsResponse CasinoDetails (double? number);

        /// <summary>
        /// Casino Details
        /// </summary>
        /// <remarks>
        /// Returns casino specific details when the casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of CasinoDetailsResponse</returns>
        ApiResponse<CasinoDetailsResponse> CasinoDetailsWithHttpInfo (double? number);
        /// <summary>
        /// Casino Events
        /// </summary>
        /// <remarks>
        /// Returns a collection of events when casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoEventsResponse&gt;</returns>
        List<CasinoEventsResponse> CasinoEvents (double? number);

        /// <summary>
        /// Casino Events
        /// </summary>
        /// <remarks>
        /// Returns a collection of events when casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoEventsResponse&gt;</returns>
        ApiResponse<List<CasinoEventsResponse>> CasinoEventsWithHttpInfo (double? number);
        /// <summary>
        /// Casino Poker Cash Games
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        List<CasinoPokerCashGamesResponse> CasinoPokerCashGames (double? number);

        /// <summary>
        /// Casino Poker Cash Games
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        ApiResponse<List<CasinoPokerCashGamesResponse>> CasinoPokerCashGamesWithHttpInfo (double? number);
        /// <summary>
        /// Casino Poker Schedules
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        List<CasinoPokerSchedulesResponse> CasinoPokerSchedules (double? number);

        /// <summary>
        /// Casino Poker Schedules
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        ApiResponse<List<CasinoPokerSchedulesResponse>> CasinoPokerSchedulesWithHttpInfo (double? number);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// All Casinos
        /// </summary>
        /// <remarks>
        /// Returns collection of all casinos
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AllCasinosResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AllCasinosResponse>> AllCasinosAsync ();

        /// <summary>
        /// All Casinos
        /// </summary>
        /// <remarks>
        /// Returns collection of all casinos
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AllCasinosResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AllCasinosResponse>>> AllCasinosAsyncWithHttpInfo ();
        /// <summary>
        /// Casino Details
        /// </summary>
        /// <remarks>
        /// Returns casino specific details when the casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of CasinoDetailsResponse</returns>
        System.Threading.Tasks.Task<CasinoDetailsResponse> CasinoDetailsAsync (double? number);

        /// <summary>
        /// Casino Details
        /// </summary>
        /// <remarks>
        /// Returns casino specific details when the casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (CasinoDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CasinoDetailsResponse>> CasinoDetailsAsyncWithHttpInfo (double? number);
        /// <summary>
        /// Casino Events
        /// </summary>
        /// <remarks>
        /// Returns a collection of events when casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoEventsResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CasinoEventsResponse>> CasinoEventsAsync (double? number);

        /// <summary>
        /// Casino Events
        /// </summary>
        /// <remarks>
        /// Returns a collection of events when casino number is provided
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoEventsResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CasinoEventsResponse>>> CasinoEventsAsyncWithHttpInfo (double? number);
        /// <summary>
        /// Casino Poker Cash Games
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CasinoPokerCashGamesResponse>> CasinoPokerCashGamesAsync (double? number);

        /// <summary>
        /// Casino Poker Cash Games
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoPokerCashGamesResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CasinoPokerCashGamesResponse>>> CasinoPokerCashGamesAsyncWithHttpInfo (double? number);
        /// <summary>
        /// Casino Poker Schedules
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        System.Threading.Tasks.Task<List<CasinoPokerSchedulesResponse>> CasinoPokerSchedulesAsync (double? number);

        /// <summary>
        /// Casino Poker Schedules
        /// </summary>
        /// <remarks>
        /// This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoPokerSchedulesResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CasinoPokerSchedulesResponse>>> CasinoPokerSchedulesAsyncWithHttpInfo (double? number);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VenueServiceV10Api : IVenueServiceV10Api
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VenueServiceV10Api"/> class.
        /// </summary>
        /// <returns></returns>
        public VenueServiceV10Api(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VenueServiceV10Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VenueServiceV10Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// All Casinos Returns collection of all casinos
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AllCasinosResponse&gt;</returns>
        public List<AllCasinosResponse> AllCasinos ()
        {
             ApiResponse<List<AllCasinosResponse>> localVarResponse = AllCasinosWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// All Casinos Returns collection of all casinos
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AllCasinosResponse&gt;</returns>
        public ApiResponse< List<AllCasinosResponse> > AllCasinosWithHttpInfo ()
        {

            var localVarPath = "/venue/v1/casinos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllCasinos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AllCasinosResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AllCasinosResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AllCasinosResponse>)));
            
        }

        /// <summary>
        /// All Casinos Returns collection of all casinos
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AllCasinosResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AllCasinosResponse>> AllCasinosAsync ()
        {
             ApiResponse<List<AllCasinosResponse>> localVarResponse = await AllCasinosAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// All Casinos Returns collection of all casinos
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AllCasinosResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AllCasinosResponse>>> AllCasinosAsyncWithHttpInfo ()
        {

            var localVarPath = "/venue/v1/casinos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllCasinos", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AllCasinosResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AllCasinosResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AllCasinosResponse>)));
            
        }

        /// <summary>
        /// Casino Details Returns casino specific details when the casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>CasinoDetailsResponse</returns>
        public CasinoDetailsResponse CasinoDetails (double? number)
        {
             ApiResponse<CasinoDetailsResponse> localVarResponse = CasinoDetailsWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Casino Details Returns casino specific details when the casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of CasinoDetailsResponse</returns>
        public ApiResponse< CasinoDetailsResponse > CasinoDetailsWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoDetails");

            var localVarPath = "/venue/v1/casinos/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CasinoDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CasinoDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CasinoDetailsResponse)));
            
        }

        /// <summary>
        /// Casino Details Returns casino specific details when the casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of CasinoDetailsResponse</returns>
        public async System.Threading.Tasks.Task<CasinoDetailsResponse> CasinoDetailsAsync (double? number)
        {
             ApiResponse<CasinoDetailsResponse> localVarResponse = await CasinoDetailsAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Casino Details Returns casino specific details when the casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (CasinoDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CasinoDetailsResponse>> CasinoDetailsAsyncWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoDetails");

            var localVarPath = "/venue/v1/casinos/{number}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CasinoDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CasinoDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CasinoDetailsResponse)));
            
        }

        /// <summary>
        /// Casino Events Returns a collection of events when casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoEventsResponse&gt;</returns>
        public List<CasinoEventsResponse> CasinoEvents (double? number)
        {
             ApiResponse<List<CasinoEventsResponse>> localVarResponse = CasinoEventsWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Casino Events Returns a collection of events when casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoEventsResponse&gt;</returns>
        public ApiResponse< List<CasinoEventsResponse> > CasinoEventsWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoEvents");

            var localVarPath = "/venue/v1/casinos/{number}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoEventsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoEventsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoEventsResponse>)));
            
        }

        /// <summary>
        /// Casino Events Returns a collection of events when casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoEventsResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CasinoEventsResponse>> CasinoEventsAsync (double? number)
        {
             ApiResponse<List<CasinoEventsResponse>> localVarResponse = await CasinoEventsAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Casino Events Returns a collection of events when casino number is provided
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoEventsResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CasinoEventsResponse>>> CasinoEventsAsyncWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoEvents");

            var localVarPath = "/venue/v1/casinos/{number}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoEventsResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoEventsResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoEventsResponse>)));
            
        }

        /// <summary>
        /// Casino Poker Cash Games This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        public List<CasinoPokerCashGamesResponse> CasinoPokerCashGames (double? number)
        {
             ApiResponse<List<CasinoPokerCashGamesResponse>> localVarResponse = CasinoPokerCashGamesWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Casino Poker Cash Games This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        public ApiResponse< List<CasinoPokerCashGamesResponse> > CasinoPokerCashGamesWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoPokerCashGames");

            var localVarPath = "/venue/v1/casinos/{number}/poker-cash-games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoPokerCashGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoPokerCashGamesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoPokerCashGamesResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoPokerCashGamesResponse>)));
            
        }

        /// <summary>
        /// Casino Poker Cash Games This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoPokerCashGamesResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CasinoPokerCashGamesResponse>> CasinoPokerCashGamesAsync (double? number)
        {
             ApiResponse<List<CasinoPokerCashGamesResponse>> localVarResponse = await CasinoPokerCashGamesAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Casino Poker Cash Games This resource returns the collection of poker cash games schedules for a specific casino, a cash game schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;:5204,             \&quot;Day\&quot;:\&quot;Every Day\&quot;,             \&quot;Start\&quot;:\&quot;Select\&quot;,             \&quot;End\&quot;:\&quot;Select\&quot;,             \&quot;NumberOfGames\&quot;:5,             \&quot;StakeFrom\&quot;:\&quot;5\&quot;,             \&quot;StakeTo\&quot;:\&quot;250\&quot;,             \&quot;BlindsFrom\&quot;:\&quot;.25\&quot;,             \&quot;BlindsTo\&quot;:\&quot;10\&quot;,             \&quot;SessionOrRake\&quot;:\&quot;Rake\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoPokerCashGamesResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CasinoPokerCashGamesResponse>>> CasinoPokerCashGamesAsyncWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoPokerCashGames");

            var localVarPath = "/venue/v1/casinos/{number}/poker-cash-games";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoPokerCashGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoPokerCashGamesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoPokerCashGamesResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoPokerCashGamesResponse>)));
            
        }

        /// <summary>
        /// Casino Poker Schedules This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        public List<CasinoPokerSchedulesResponse> CasinoPokerSchedules (double? number)
        {
             ApiResponse<List<CasinoPokerSchedulesResponse>> localVarResponse = CasinoPokerSchedulesWithHttpInfo(number);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Casino Poker Schedules This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>ApiResponse of List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        public ApiResponse< List<CasinoPokerSchedulesResponse> > CasinoPokerSchedulesWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoPokerSchedules");

            var localVarPath = "/venue/v1/casinos/{number}/poker-schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoPokerSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoPokerSchedulesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoPokerSchedulesResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoPokerSchedulesResponse>)));
            
        }

        /// <summary>
        /// Casino Poker Schedules This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of List&lt;CasinoPokerSchedulesResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<CasinoPokerSchedulesResponse>> CasinoPokerSchedulesAsync (double? number)
        {
             ApiResponse<List<CasinoPokerSchedulesResponse>> localVarResponse = await CasinoPokerSchedulesAsyncWithHttpInfo(number);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Casino Poker Schedules This resource returns the collection of poker tournament schedules for a specific casino, a schedule is represented as below, &#x60;&#x60;&#x60;         {             \&quot;CasinoNumber\&quot;: 5005,             \&quot;Day\&quot;: \&quot;Every Tuesday \&quot;,             \&quot;StartDate\&quot;: \&quot;2015-06-08 00:00:00\&quot;,             \&quot;EndDate\&quot;: \&quot;2015-09-27 00:00:00\&quot;,             \&quot;Game\&quot;: \&quot;&amp;pound;5: &amp;pound;500 Gtd With &amp;pound;5 R/b And &amp;pound;10 A/o\&quot;,             \&quot;GameType\&quot;: \&quot;Re-Buy \&quot;,             \&quot;Stake\&quot;: 5,             \&quot;StartingStake\&quot;: \&quot;5,000\&quot;,             \&quot;RegFee\&quot;: 5,             \&quot;StartTime\&quot;: \&quot;20:00\&quot;         } &#x60;&#x60;&#x60;
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="number">Casino number in form of an integer</param>
        /// <returns>Task of ApiResponse (List&lt;CasinoPokerSchedulesResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CasinoPokerSchedulesResponse>>> CasinoPokerSchedulesAsyncWithHttpInfo (double? number)
        {
            // verify the required parameter 'number' is set
            if (number == null)
                throw new ApiException(400, "Missing required parameter 'number' when calling VenueServiceV10Api->CasinoPokerSchedules");

            var localVarPath = "/venue/v1/casinos/{number}/poker-schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (number != null) localVarPathParams.Add("number", Configuration.ApiClient.ParameterToString(number)); // path parameter

            // authentication (auth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CasinoPokerSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CasinoPokerSchedulesResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CasinoPokerSchedulesResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CasinoPokerSchedulesResponse>)));
            
        }

    }
}
