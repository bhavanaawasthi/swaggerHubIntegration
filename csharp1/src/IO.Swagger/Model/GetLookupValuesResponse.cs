/* 
 * Res.Grosvenor - Rank
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetLookupValuesResponse
    /// </summary>
    [DataContract]
    public partial class GetLookupValuesResponse :  IEquatable<GetLookupValuesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLookupValuesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetLookupValuesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetLookupValuesResponse" /> class.
        /// </summary>
        /// <param name="Nationalities"> (required).</param>
        /// <param name="Countries"> (required).</param>
        /// <param name="Casinos"> (required).</param>
        /// <param name="Titles"> (required).</param>
        public GetLookupValuesResponse(List<Object> Nationalities = null, List<Object> Countries = null, List<Object> Casinos = null, List<Object> Titles = null)
        {
            // to ensure "Nationalities" is required (not null)
            if (Nationalities == null)
            {
                throw new InvalidDataException("Nationalities is a required property for GetLookupValuesResponse and cannot be null");
            }
            else
            {
                this.Nationalities = Nationalities;
            }
            // to ensure "Countries" is required (not null)
            if (Countries == null)
            {
                throw new InvalidDataException("Countries is a required property for GetLookupValuesResponse and cannot be null");
            }
            else
            {
                this.Countries = Countries;
            }
            // to ensure "Casinos" is required (not null)
            if (Casinos == null)
            {
                throw new InvalidDataException("Casinos is a required property for GetLookupValuesResponse and cannot be null");
            }
            else
            {
                this.Casinos = Casinos;
            }
            // to ensure "Titles" is required (not null)
            if (Titles == null)
            {
                throw new InvalidDataException("Titles is a required property for GetLookupValuesResponse and cannot be null");
            }
            else
            {
                this.Titles = Titles;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Nationalities", EmitDefaultValue=false)]
        public List<Object> Nationalities { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Countries", EmitDefaultValue=false)]
        public List<Object> Countries { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Casinos", EmitDefaultValue=false)]
        public List<Object> Casinos { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Titles", EmitDefaultValue=false)]
        public List<Object> Titles { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetLookupValuesResponse {\n");
            sb.Append("  Nationalities: ").Append(Nationalities).Append("\n");
            sb.Append("  Countries: ").Append(Countries).Append("\n");
            sb.Append("  Casinos: ").Append(Casinos).Append("\n");
            sb.Append("  Titles: ").Append(Titles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as GetLookupValuesResponse);
        }

        /// <summary>
        /// Returns true if GetLookupValuesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetLookupValuesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetLookupValuesResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Nationalities == other.Nationalities ||
                    this.Nationalities != null &&
                    this.Nationalities.SequenceEqual(other.Nationalities)
                ) && 
                (
                    this.Countries == other.Countries ||
                    this.Countries != null &&
                    this.Countries.SequenceEqual(other.Countries)
                ) && 
                (
                    this.Casinos == other.Casinos ||
                    this.Casinos != null &&
                    this.Casinos.SequenceEqual(other.Casinos)
                ) && 
                (
                    this.Titles == other.Titles ||
                    this.Titles != null &&
                    this.Titles.SequenceEqual(other.Titles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nationalities != null)
                    hash = hash * 59 + this.Nationalities.GetHashCode();
                if (this.Countries != null)
                    hash = hash * 59 + this.Countries.GetHashCode();
                if (this.Casinos != null)
                    hash = hash * 59 + this.Casinos.GetHashCode();
                if (this.Titles != null)
                    hash = hash * 59 + this.Titles.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
