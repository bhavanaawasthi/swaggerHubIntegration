/* 
 * Res.Grosvenor - Rank
 *
 * Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface. This endpoint is specific to Grosvenor Casinos implementation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CasinoPokerCashGamesResponse
    /// </summary>
    [DataContract]
    public partial class CasinoPokerCashGamesResponse :  IEquatable<CasinoPokerCashGamesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CasinoPokerCashGamesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CasinoPokerCashGamesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CasinoPokerCashGamesResponse" /> class.
        /// </summary>
        /// <param name="CasinoNumber"> (required).</param>
        /// <param name="Day"> (required).</param>
        /// <param name="Start"> (required).</param>
        /// <param name="End"> (required).</param>
        /// <param name="NumberOfGames"> (required).</param>
        /// <param name="StakeFrom"> (required).</param>
        /// <param name="StakeTo"> (required).</param>
        /// <param name="BlindsFrom"> (required).</param>
        /// <param name="BlindsTo"> (required).</param>
        /// <param name="SessionOrRake"> (required).</param>
        public CasinoPokerCashGamesResponse(int? CasinoNumber = null, string Day = null, string Start = null, string End = null, int? NumberOfGames = null, string StakeFrom = null, string StakeTo = null, string BlindsFrom = null, string BlindsTo = null, string SessionOrRake = null)
        {
            // to ensure "CasinoNumber" is required (not null)
            if (CasinoNumber == null)
            {
                throw new InvalidDataException("CasinoNumber is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.CasinoNumber = CasinoNumber;
            }
            // to ensure "Day" is required (not null)
            if (Day == null)
            {
                throw new InvalidDataException("Day is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.Day = Day;
            }
            // to ensure "Start" is required (not null)
            if (Start == null)
            {
                throw new InvalidDataException("Start is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.Start = Start;
            }
            // to ensure "End" is required (not null)
            if (End == null)
            {
                throw new InvalidDataException("End is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.End = End;
            }
            // to ensure "NumberOfGames" is required (not null)
            if (NumberOfGames == null)
            {
                throw new InvalidDataException("NumberOfGames is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.NumberOfGames = NumberOfGames;
            }
            // to ensure "StakeFrom" is required (not null)
            if (StakeFrom == null)
            {
                throw new InvalidDataException("StakeFrom is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.StakeFrom = StakeFrom;
            }
            // to ensure "StakeTo" is required (not null)
            if (StakeTo == null)
            {
                throw new InvalidDataException("StakeTo is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.StakeTo = StakeTo;
            }
            // to ensure "BlindsFrom" is required (not null)
            if (BlindsFrom == null)
            {
                throw new InvalidDataException("BlindsFrom is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.BlindsFrom = BlindsFrom;
            }
            // to ensure "BlindsTo" is required (not null)
            if (BlindsTo == null)
            {
                throw new InvalidDataException("BlindsTo is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.BlindsTo = BlindsTo;
            }
            // to ensure "SessionOrRake" is required (not null)
            if (SessionOrRake == null)
            {
                throw new InvalidDataException("SessionOrRake is a required property for CasinoPokerCashGamesResponse and cannot be null");
            }
            else
            {
                this.SessionOrRake = SessionOrRake;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CasinoNumber", EmitDefaultValue=false)]
        public int? CasinoNumber { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Day", EmitDefaultValue=false)]
        public string Day { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Start", EmitDefaultValue=false)]
        public string Start { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="End", EmitDefaultValue=false)]
        public string End { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="NumberOfGames", EmitDefaultValue=false)]
        public int? NumberOfGames { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="StakeFrom", EmitDefaultValue=false)]
        public string StakeFrom { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="StakeTo", EmitDefaultValue=false)]
        public string StakeTo { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="BlindsFrom", EmitDefaultValue=false)]
        public string BlindsFrom { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="BlindsTo", EmitDefaultValue=false)]
        public string BlindsTo { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SessionOrRake", EmitDefaultValue=false)]
        public string SessionOrRake { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CasinoPokerCashGamesResponse {\n");
            sb.Append("  CasinoNumber: ").Append(CasinoNumber).Append("\n");
            sb.Append("  Day: ").Append(Day).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  NumberOfGames: ").Append(NumberOfGames).Append("\n");
            sb.Append("  StakeFrom: ").Append(StakeFrom).Append("\n");
            sb.Append("  StakeTo: ").Append(StakeTo).Append("\n");
            sb.Append("  BlindsFrom: ").Append(BlindsFrom).Append("\n");
            sb.Append("  BlindsTo: ").Append(BlindsTo).Append("\n");
            sb.Append("  SessionOrRake: ").Append(SessionOrRake).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CasinoPokerCashGamesResponse);
        }

        /// <summary>
        /// Returns true if CasinoPokerCashGamesResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CasinoPokerCashGamesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CasinoPokerCashGamesResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CasinoNumber == other.CasinoNumber ||
                    this.CasinoNumber != null &&
                    this.CasinoNumber.Equals(other.CasinoNumber)
                ) && 
                (
                    this.Day == other.Day ||
                    this.Day != null &&
                    this.Day.Equals(other.Day)
                ) && 
                (
                    this.Start == other.Start ||
                    this.Start != null &&
                    this.Start.Equals(other.Start)
                ) && 
                (
                    this.End == other.End ||
                    this.End != null &&
                    this.End.Equals(other.End)
                ) && 
                (
                    this.NumberOfGames == other.NumberOfGames ||
                    this.NumberOfGames != null &&
                    this.NumberOfGames.Equals(other.NumberOfGames)
                ) && 
                (
                    this.StakeFrom == other.StakeFrom ||
                    this.StakeFrom != null &&
                    this.StakeFrom.Equals(other.StakeFrom)
                ) && 
                (
                    this.StakeTo == other.StakeTo ||
                    this.StakeTo != null &&
                    this.StakeTo.Equals(other.StakeTo)
                ) && 
                (
                    this.BlindsFrom == other.BlindsFrom ||
                    this.BlindsFrom != null &&
                    this.BlindsFrom.Equals(other.BlindsFrom)
                ) && 
                (
                    this.BlindsTo == other.BlindsTo ||
                    this.BlindsTo != null &&
                    this.BlindsTo.Equals(other.BlindsTo)
                ) && 
                (
                    this.SessionOrRake == other.SessionOrRake ||
                    this.SessionOrRake != null &&
                    this.SessionOrRake.Equals(other.SessionOrRake)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CasinoNumber != null)
                    hash = hash * 59 + this.CasinoNumber.GetHashCode();
                if (this.Day != null)
                    hash = hash * 59 + this.Day.GetHashCode();
                if (this.Start != null)
                    hash = hash * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hash = hash * 59 + this.End.GetHashCode();
                if (this.NumberOfGames != null)
                    hash = hash * 59 + this.NumberOfGames.GetHashCode();
                if (this.StakeFrom != null)
                    hash = hash * 59 + this.StakeFrom.GetHashCode();
                if (this.StakeTo != null)
                    hash = hash * 59 + this.StakeTo.GetHashCode();
                if (this.BlindsFrom != null)
                    hash = hash * 59 + this.BlindsFrom.GetHashCode();
                if (this.BlindsTo != null)
                    hash = hash * 59 + this.BlindsTo.GetHashCode();
                if (this.SessionOrRake != null)
                    hash = hash * 59 + this.SessionOrRake.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
