/* 
 * Res.Grosvenor - Rank
 *
 * Rank Enterprise Services API is a collection of business services exposed over a RESTful inteface. This endpoint is specific to Grosvenor Casinos implementation.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AllCasinosResponse
    /// </summary>
    [DataContract]
    public partial class AllCasinosResponse :  IEquatable<AllCasinosResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllCasinosResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AllCasinosResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AllCasinosResponse" /> class.
        /// </summary>
        /// <param name="Name"> (required).</param>
        /// <param name="Number"> (required).</param>
        /// <param name="Address"> (required).</param>
        /// <param name="Postcode"> (required).</param>
        /// <param name="Town"> (required).</param>
        /// <param name="Email"> (required).</param>
        /// <param name="Location"> (required).</param>
        /// <param name="RegionName"> (required).</param>
        /// <param name="Position"> (required).</param>
        public AllCasinosResponse(string Name = null, int? Number = null, string Address = null, string Postcode = null, string Town = null, string Email = null, string Location = null, string RegionName = null, Object Position = null)
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Number" is required (not null)
            if (Number == null)
            {
                throw new InvalidDataException("Number is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Number = Number;
            }
            // to ensure "Address" is required (not null)
            if (Address == null)
            {
                throw new InvalidDataException("Address is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Address = Address;
            }
            // to ensure "Postcode" is required (not null)
            if (Postcode == null)
            {
                throw new InvalidDataException("Postcode is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Postcode = Postcode;
            }
            // to ensure "Town" is required (not null)
            if (Town == null)
            {
                throw new InvalidDataException("Town is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Town = Town;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Location" is required (not null)
            if (Location == null)
            {
                throw new InvalidDataException("Location is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Location = Location;
            }
            // to ensure "RegionName" is required (not null)
            if (RegionName == null)
            {
                throw new InvalidDataException("RegionName is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.RegionName = RegionName;
            }
            // to ensure "Position" is required (not null)
            if (Position == null)
            {
                throw new InvalidDataException("Position is a required property for AllCasinosResponse and cannot be null");
            }
            else
            {
                this.Position = Position;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Number", EmitDefaultValue=false)]
        public int? Number { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Town", EmitDefaultValue=false)]
        public string Town { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Location", EmitDefaultValue=false)]
        public string Location { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="RegionName", EmitDefaultValue=false)]
        public string RegionName { get; set; }
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Position", EmitDefaultValue=false)]
        public Object Position { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllCasinosResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Town: ").Append(Town).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AllCasinosResponse);
        }

        /// <summary>
        /// Returns true if AllCasinosResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AllCasinosResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllCasinosResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.Postcode == other.Postcode ||
                    this.Postcode != null &&
                    this.Postcode.Equals(other.Postcode)
                ) && 
                (
                    this.Town == other.Town ||
                    this.Town != null &&
                    this.Town.Equals(other.Town)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Location == other.Location ||
                    this.Location != null &&
                    this.Location.Equals(other.Location)
                ) && 
                (
                    this.RegionName == other.RegionName ||
                    this.RegionName != null &&
                    this.RegionName.Equals(other.RegionName)
                ) && 
                (
                    this.Position == other.Position ||
                    this.Position != null &&
                    this.Position.Equals(other.Position)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.Postcode != null)
                    hash = hash * 59 + this.Postcode.GetHashCode();
                if (this.Town != null)
                    hash = hash * 59 + this.Town.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Location != null)
                    hash = hash * 59 + this.Location.GetHashCode();
                if (this.RegionName != null)
                    hash = hash * 59 + this.RegionName.GetHashCode();
                if (this.Position != null)
                    hash = hash * 59 + this.Position.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
